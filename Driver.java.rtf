{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww25400\viewh12920\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //Josiah Amundson\
package app;\
\
import java.io.File;\
import java.io.FileNotFoundException;\
import java.util.Scanner;\
\
//starter code for MazeSolver\
//CST-201\
public class Driver \{\
	static int rows;\
	static int cols;\
	// make a 2-d array of cells\
	static MazeCell[][] cells;\
\
	/**\
	 *\
	 * @param start\
	 * @param end   find a path through the maze if found, output the path from\
	 *              start to end if not path exists, output a message stating so\
	 *\
	 */\
	// implement this method\
\
	// MyStack will record\
	// while MyStack top is not end\
	// if north exists and is unvisited and is not a wall visit\
	// else if east exists and is unvisited and is not a wall visit\
	// else if south exists and unvisited and is not a wall visit\
	// else if west exists and unvisited and is not a wall visit\
	// else if stack is not empty, pop\
	// else report that the maze is unsolveable\
	public static void depthFirst(MazeCell start, MazeCell end) \{\
		MyStack path = new MyStack(rows, cols);\
		path.push(start);\
		// while MyStack top is not end\
		while (path.top() != end) \{\
			int curCol = path.top().getCol();\
			int curRow = path.top().getRow();\
\
			// if north exists and is unvisited and is not a wall visit and push\
			if (path.top().canINorth() && cells[curRow - 1][curCol].unVisited()\
					&& cells[curRow - 1][curCol].isItPath()) \{\
				cells[curRow][curCol].visit();\
				path.push(cells[curRow - 1][curCol]);\
			\}\
			// else if east exists and is unvisited and is not a wall visit\
			else if (path.top().canIEast(cols) && cells[curRow][curCol + 1].unVisited()\
					&& cells[curRow][curCol + 1].isItPath()) \{\
				cells[curRow][curCol].visit();\
				path.push(cells[curRow][curCol + 1]);\
			\}\
			// else if south exists and unvisited and is not a wall visit\
			else if (path.top().canISouth(rows) && cells[curRow + 1][curCol].unVisited()\
					&& cells[curRow + 1][curCol].isItPath()) \{\
				cells[curRow][curCol].visit();\
				path.push(cells[curRow + 1][curCol]);\
			\}\
			// else if west exists and unvisited and is not a wall visit\
			else if (path.top().canIWest() && cells[curRow][curCol - 1].unVisited()\
					&& cells[curRow][curCol - 1].isItPath()) \{\
				cells[curRow][curCol].visit();\
				path.push(cells[curRow][curCol - 1]);\
			\}\
			// else if stack is not empty, pop\
			else if (path.empty() == false) \{\
				path.pop();\
			\}\
			// else report that the maze is unsolveable\
			else \{\
				System.out.print("error: maze is unsolveable, jerk");\
				return;\
			\}\
		\}\
		if (path.empty() == false) \{\
			MyStack pathPrint = new MyStack(rows, cols);\
			while (path.empty() == false) \{\
				pathPrint.push(path.top());\
				path.pop();\
			\}\
			System.out.print("Take this path, lost pilgrim:");\
			pathPrint.pop();\
			while (pathPrint.empty() == false) \{\
				System.out.print("[" + pathPrint.top().getRow() + "," + pathPrint.top().getCol() + "]");\
				pathPrint.pop();\
			\}\
		\}\
	\}\
\
	// create an array of queues == rows*cols\
	// add start\
	// while queue.front() != end\
	// make the front the current cell\
	// if you can go north from the front and it is unvisited and it is not a wall\
	// add it to the queue, add prev to new, make it visited\
	// if you can go east from the front and it is unvisited and it is not a wall\
	// add it to the queue, add prev to new, make it visited\
	// if you can go south from the front and it is unvisited and it is not a wall\
	// add it to the queue, add prev to new, make it visited\
	// if you can go east from the front and it is unvisited and it is not a wall\
	// add it to the queue, add prev to new, make it visited\
	// if queue is empty\
	// error it is broken\
\
	public static void breadthFirst(MazeCell start, MazeCell end) \{\
		// add start\
		MyQ path = new MyQ();\
		path.push(start);\
		int count = 0;\
		// while queue.front() != end\
		while (path.front() != end) \{\
			// make the front the current cell\
			int curCol = path.front().getCol();\
			int curRow = path.front().getRow();\
			count++;\
			// if you can go north from the front and it is unvisited and it is not a wall\
			// add it to the queue, add prev to new, make it visited\
			if (path.front().canINorth() && cells[curRow - 1][curCol].unVisited()\
					&& cells[curRow - 1][curCol].isItPath()) \{\
				path.push(cells[curRow - 1][curCol]);\
				cells[curRow - 1][curCol].setPrevCol(curCol);\
				cells[curRow - 1][curCol].setPrevRow(curRow);\
				cells[curRow - 1][curCol].visit();\
				count = 0;\
			\}\
			// if you can go east from the front and it is unvisited and it is not a wall\
			// add it to the queue, add prev to new, make it visited\
			if (path.front().canIEast(cols) && cells[curRow][curCol + 1].unVisited()\
					&& cells[curRow][curCol + 1].isItPath()) \{\
				path.push(cells[curRow][curCol + 1]);\
				cells[curRow][curCol + 1].setPrevCol(curCol);\
				cells[curRow][curCol + 1].setPrevRow(curRow);\
				cells[curRow][curCol + 1].visit();\
				count = 0;\
			\}\
			// if you can go south from the front and it is unvisited and it is not a wall\
			// add it to the queue, add prev to new, make it visited\
			if (path.front().canISouth(rows) && cells[curRow + 1][curCol].unVisited()\
					&& cells[curRow + 1][curCol].isItPath()) \{\
				path.push(cells[curRow + 1][curCol]);\
				cells[curRow + 1][curCol].setPrevCol(curCol);\
				cells[curRow + 1][curCol].setPrevRow(curRow);\
				cells[curRow + 1][curCol].visit();\
				count = 0;\
			\}\
			// if you can go east from the front and it is unvisited and it is not a wall\
			// add it to the queue, add prev to new, make it visited\
			if (path.front().canIWest() && cells[curRow][curCol - 1].unVisited()\
					&& cells[curRow][curCol - 1].isItPath()) \{\
				path.push(cells[curRow][curCol - 1]);\
				cells[curRow][curCol - 1].setPrevCol(curCol);\
				cells[curRow][curCol - 1].setPrevRow(curRow);\
				cells[curRow][curCol - 1].visit();\
				count = 0;\
			\}\
			// if queue is empty\
			// error it is broken\
			if (path.empty()) \{\
				System.out.println("Error: avoid at all costs. Life, limb, and eyesight included");\
				return;\
			\}\
			\
			if (count >= 1) \{\
			path.pop();\
			\}\
		\
		\}\
		//retrieve the previous\
		if (path.empty() == false) \{\
			System.out.println("Let's walk your journey backwards!");\
			MazeCell currCell = new MazeCell(path.front());\
			while (currCell != start) \{\
				System.out.print("[" + currCell.getPrevRow() + " " + currCell.getPrevCol() + "]");\
				currCell = cells[currCell.getPrevRow()][currCell.getPrevCol()];\
			\}\
		\}\
	\}\
\
	public static void main(String[] args) throws FileNotFoundException \{\
		// create the Maze from the file\
		Scanner fin = new Scanner(new File("Maze.in"));\
		// read in the rows and cols\
		rows = fin.nextInt();\
		cols = fin.nextInt();\
		// create the maze\
		int[][] grid = new int[rows][cols];\
		// read in the data from the file to populate\
		for (int i = 0; i < rows; i++) \{\
			for (int j = 0; j < cols; j++) \{\
				grid[i][j] = fin.nextInt();\
			\}\
		\}\
		// look at it - Create Start and End points\
		for (int i = 0; i < rows; i++) \{\
			for (int j = 0; j < cols; j++) \{\
				if (grid[i][j] == 3)\
					System.out.print("S ");\
				else if (grid[i][j] == 4)\
					System.out.print("E ");\
				else\
					System.out.print(grid[i][j] + " ");\
			\}\
			System.out.println();\
		\}\
		cells = new MazeCell[rows][cols];\
		// populate with MazeCell obj - default obj for walls\
		MazeCell start = new MazeCell(), end = new MazeCell();\
		// iterate over the grid, make cells and set coordinates\
		for (int i = 0; i < rows; i++) \{\
			for (int j = 0; j < cols; j++) \{\
				// make a new cell\
				cells[i][j] = new MazeCell();\
				// if it isn't a wall, set the coordinates\
				if (grid[i][j] != 0) \{\
					cells[i][j].setCoordinates(i, j);\
					cells[i][j].makePath();\
					// look for the start and end cells\
					if (grid[i][j] == 3)\
						start = cells[i][j];\
					if (grid[i][j] == 4)\
						end = cells[i][j];\
				\}\
			\}\
		\}\
		// testing\
		System.out.println("start:" + start + " end:" + end);\
		// solve it!\
		depthFirst(start, end);\
\
		System.out.println("\\nand if you thought that was cool, wait for this!");\
		// iterate over the grid, make cells and set coordinates\
		for (int i = 0; i < rows; i++) \{\
			for (int j = 0; j < cols; j++) \{\
				cells[i][j].setVisited(false);\
			\}\
		\}\
		breadthFirst(start, end);\
	\}\
\}\
}